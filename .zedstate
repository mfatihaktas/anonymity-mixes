{"split":"2-0","window":{"width":1440,"height":877,"top":23,"left":0,"isMaximized":true},"session.current":["/mix_exp.py","/batchmix_sim_objs.py"],"session.open":{"/mix_exp.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":11,"column":15},"end":{"row":11,"column":15}},"lastUse":1577611569249,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":12}},"text":"import simpy"},{"action":"insertText","range":{"start":{"row":0,"column":12},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":79,"column":0}},"lines":["import numpy as np","","from plot_utils import *","from batchmix_sim_objs import *","from randmix_sim_objs import *","","def sim(n, k, ar, t='bm'):","  log(INFO, \"started;\", n=n, k=k, ar=ar)","  ","  env = simpy.Environment()","  if t == 'bm':","    mix = BatchMix(env, 'bm', n, k)","  elif t == 'tsm':","    mix = True_SamplekMix(env, 'tsm', n, k)","  mg = MsgGen(env, 'mg', ar, n, out=mix)","  env.run(until=50000*1)","  ET, ET2 = mix.ET_ET2()","  return ET, ET2","","def plot_batchmix_EQt_vs_k():","  n = 100","  ","  def plot_(ar):","    k_l, ET_l = [], []","    for _k in np.linspace(1, n, 10):","      k = int(_k)","      k_l.append(k)","      ET, ET2 = sim(n, k, ar)","      ET_l.append(ET)","    plot.plot(k_l, ET_l, label=r'$\\lambda= {}$'.format(ar), color=next(darkcolor_c), marker=next(marker_c), mew=mew, ms=ms, linestyle=':')","  ","  plot_(ar=1)","  ","  plot.legend()","  plot.xlabel(r'$\\lambda$', fontsize=14)","  plot.ylabel(r'$E[T]$', fontsize=14)","  plot.title(r'Batch mix, $n= {}$'.format(n) )","  fig = plot.gcf()","  fig.set_size_inches(6, 5)","  fig.tight_layout()","  plot.savefig(\"plot_batchmix_EQt_vs_k_n_{}.pdf\".format(n) )","  log(WARNING, \"done; n= {}\".format(n) )","","def plot_batch_vs_samplek_mix():","  n = 100","  ","  def plot_EQt_vs_k(ar):","    k_l, ET_bm_l, ET_tsm_l = [], [], []","    for _k in np.linspace(1, n, 10):","      k = int(_k)","      k_l.append(k)","      print(\">> k= {}\".format(k) )","      ","      ET_bm, ET2_bm = sim(n, k, ar, t='bm')","      ET_bm_l.append(ET_bm)","      ","      ET_tsm, ET2_tsm = sim(n, k, ar, t='tsm')","      ET_tsm_l.append(ET_tsm)","      ","      print(\"ET_bm= {}, ET_tsm= {}\".format(ET_bm, ET_tsm) )","    plot.plot(k_l, ET_bm_l, label=r'Batch-mix, $\\lambda= {}$'.format(ar), color=next(darkcolor_c), marker=next(marker_c), mew=mew, ms=ms, linestyle=':')","    plot.plot(k_l, ET_tsm_l, label=r'True-Samplek-mix, $\\lambda= {}$'.format(ar), color=next(darkcolor_c), marker=next(marker_c), mew=mew, ms=ms, linestyle=':')","  ","  plot_EQt_vs_k(ar=1)","  ","  plot.legend()","  plot.xlabel(r'$\\lambda$', fontsize=14)","  plot.ylabel(r'$E[T]$', fontsize=14)","  plot.title(r'Batch mix, $n= {}$'.format(n) )","  fig = plot.gcf()","  fig.set_size_inches(6, 5)","  fig.tight_layout()","  plot.savefig(\"plot_batch_vs_samplek_mix.pdf\")","  log(WARNING, \"done; n= {}\".format(n) )","","if __name__ == \"__main__\":","  # plot_batchmix_EQt_vs_k()","  plot_batch_vs_samplek_mix()"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":39},"end":{"row":8,"column":40}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":40},"end":{"row":8,"column":41}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":41},"end":{"row":8,"column":42}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":42},"end":{"row":8,"column":43}},"text":"="}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":43},"end":{"row":8,"column":44}},"text":"t"}]}]],"redo":[]},"/batchmix_sim_objs.py":{"scrollTop":1334,"scrollLeft":0,"selection":{"start":{"row":83,"column":6},"end":{"row":83,"column":21}},"lastUse":1577526161117,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":73,"column":0},"end":{"row":73,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":74,"column":0},"end":{"row":74,"column":97}},"text":"# *************************************  SamplekMix  ****************************************** #"},{"action":"insertText","range":{"start":{"row":74,"column":97},"end":{"row":75,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":75,"column":0},"end":{"row":113,"column":0}},"lines":["## n servers with Poisson arrivals, every time a message arrives, k queues are selected at uniformly random and released.","class SamplekMix(object):","  def __init__(self, env, n, k, pd=None):","    self.env = env","    self.n = n","    self.k = k","    self.pd = pd if pd is not None else 1/n","    ","    self.i_q_l = []","    for i in range(self.n):","      self.i_q_l.append(SlaveQ(_id=i, env=env) )","  ","  def __repr__(self):","    return 'SamplekMix[n={}, k={}]'.format(self.n, self.k)","  ","  def qt_l(self):","    l = []","    for q in self.i_q_l:","      l.extend(q.qt_l)","    return l","  ","  def ET(self):","    Eqt_l = [q.avg_qtime() for q in self.i_q_l]","    log(WARNING, \"Eqt_l= {}\".format(Eqt_l) )","    return np.mean([q.avg_qtime() for q in self.i_q_l] )","  ","  def put(self, p):","    slog(DEBUG, self.env, self, \"recved\", p)","    self.i_q_l[p.flow_id].put(p)","    ","    l = list(range(self.n) )","    l.remove(p.flow_id)","    if np.random.uniform(0, 1) <= self.pd:","      i_l = [p.flow_id] + [l[i] for i in np.random.choice(self.n-1, self.k-1, replace=False) ]","    else:","      i_l = [l[i] for i in np.random.choice(self.n-1, self.k, replace=False) ]","    # print(\"i_l= {}\".format(i_l) )","    for i in i_l:"]},{"action":"insertText","range":{"start":{"row":113,"column":0},"end":{"row":113,"column":29}},"text":"      self.i_q_l[i].release()"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":80,"column":0},"end":{"row":80,"column":14}},"text":"    self.k = k"},{"action":"removeLines","range":{"start":{"row":79,"column":0},"end":{"row":80,"column":0}},"nl":"\n","lines":["    self.n = n"]},{"action":"removeText","range":{"start":{"row":78,"column":4},"end":{"row":78,"column":18}},"text":"self.env = env"},{"action":"removeText","range":{"start":{"row":78,"column":4},"end":{"row":79,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":78,"column":4},"end":{"row":78,"column":36}},"text":"super().__init__(env, _id, n, k)"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":81,"column":0},"end":{"row":84,"column":0}},"nl":"\n","lines":["    self.i_q_l = []","    for i in range(self.n):","      self.i_q_l.append(SlaveQ(_id=i, env=env) )"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":81,"column":0},"end":{"row":82,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":80,"column":2},"end":{"row":80,"column":4}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":2},"end":{"row":61,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":61,"column":0},"end":{"row":61,"column":2}},"text":"  "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":61,"column":2},"end":{"row":62,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":62,"column":0},"end":{"row":62,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":61,"column":2},"end":{"row":61,"column":21}},"text":"def __repr__(self):"},{"action":"insertText","range":{"start":{"row":61,"column":21},"end":{"row":62,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":62,"column":0},"end":{"row":62,"column":61}},"text":"  return 'True_SamplekMix[n={}, k={}]'.format(self.n, self.k)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":62,"column":2},"end":{"row":62,"column":4}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":97,"column":0},"end":{"row":97,"column":2}},"text":"  "},{"action":"removeLines","range":{"start":{"row":88,"column":0},"end":{"row":97,"column":0}},"nl":"\n","lines":["    l = []","    for q in self.i_q_l:","      l.extend(q.qt_l)","    return l","  ","  def ET(self):","    Eqt_l = [q.avg_qtime() for q in self.i_q_l]","    log(WARNING, \"Eqt_l= {}\".format(Eqt_l) )","    return np.mean([q.avg_qtime() for q in self.i_q_l] )"]},{"action":"removeText","range":{"start":{"row":87,"column":2},"end":{"row":87,"column":17}},"text":"def qt_l(self):"},{"action":"removeText","range":{"start":{"row":87,"column":2},"end":{"row":88,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":87,"column":0},"end":{"row":88,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":79,"column":17},"end":{"row":79,"column":23}},"text":"object"},{"action":"insertText","range":{"start":{"row":79,"column":17},"end":{"row":79,"column":25}},"text":"BatchMix"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":99,"column":0},"end":{"row":99,"column":29}},"text":"      self.i_q_l[i].release()"},{"action":"removeLines","range":{"start":{"row":77,"column":0},"end":{"row":99,"column":0}},"nl":"\n","lines":["# *************************************  SamplekMix  ****************************************** #","## n servers with Poisson arrivals, every time a message arrives, k queues are selected at uniformly random and released.","class SamplekMix(BatchMix):","  def __init__(self, env, n, k, pd=None):","    super().__init__(env, _id, n, k)","    self.pd = pd if pd is not None else 1/n","  ","  def __repr__(self):","    return 'SamplekMix[n={}, k={}]'.format(self.n, self.k)","  ","  def put(self, p):","    slog(DEBUG, self.env, self, \"recved\", p)","    self.i_q_l[p.flow_id].put(p)","    ","    l = list(range(self.n) )","    l.remove(p.flow_id)","    if np.random.uniform(0, 1) <= self.pd:","      i_l = [p.flow_id] + [l[i] for i in np.random.choice(self.n-1, self.k-1, replace=False) ]","    else:","      i_l = [l[i] for i in np.random.choice(self.n-1, self.k, replace=False) ]","    # print(\"i_l= {}\".format(i_l) )","    for i in i_l:"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":53,"column":0},"end":{"row":54,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":0},"end":{"row":55,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":54,"column":0},"end":{"row":54,"column":97}},"text":"# *************************************  SamplekMix  ****************************************** #"},{"action":"insertText","range":{"start":{"row":54,"column":97},"end":{"row":55,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":55,"column":0},"end":{"row":76,"column":0}},"lines":["## n servers with Poisson arrivals, every time a message arrives, k queues are selected at uniformly random and released.","class SamplekMix(BatchMix):","  def __init__(self, env, n, k, pd=None):","    super().__init__(env, _id, n, k)","    self.pd = pd if pd is not None else 1/n","  ","  def __repr__(self):","    return 'SamplekMix[n={}, k={}]'.format(self.n, self.k)","  ","  def put(self, p):","    slog(DEBUG, self.env, self, \"recved\", p)","    self.i_q_l[p.flow_id].put(p)","    ","    l = list(range(self.n) )","    l.remove(p.flow_id)","    if np.random.uniform(0, 1) <= self.pd:","      i_l = [p.flow_id] + [l[i] for i in np.random.choice(self.n-1, self.k-1, replace=False) ]","    else:","      i_l = [l[i] for i in np.random.choice(self.n-1, self.k, replace=False) ]","    # print(\"i_l= {}\".format(i_l) )","    for i in i_l:"]},{"action":"insertText","range":{"start":{"row":76,"column":0},"end":{"row":76,"column":29}},"text":"      self.i_q_l[i].release()"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":100,"column":0},"end":{"row":101,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":1},"end":{"row":0,"column":2}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":2},"end":{"row":0,"column":3}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":3},"end":{"row":0,"column":4}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":4},"end":{"row":0,"column":5}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":4},"end":{"row":0,"column":5}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":4}},"text":"from"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":1}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":1},"end":{"row":0,"column":2}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":2},"end":{"row":0,"column":3}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":3},"end":{"row":0,"column":4}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":4},"end":{"row":0,"column":5}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":5},"end":{"row":0,"column":6}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":6},"end":{"row":0,"column":7}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":7},"end":{"row":0,"column":8}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":8},"end":{"row":0,"column":9}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":9},"end":{"row":0,"column":10}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":10},"end":{"row":0,"column":11}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":11},"end":{"row":0,"column":12}},"text":"y"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":12},"end":{"row":0,"column":13}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":13},"end":{"row":0,"column":14}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":14},"end":{"row":0,"column":15}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":15},"end":{"row":0,"column":16}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":16},"end":{"row":0,"column":17}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":17},"end":{"row":0,"column":18}},"text":"p"}]}]],"redo":[]},"/randmix_sim_objs.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":20,"column":2},"end":{"row":20,"column":2}},"lastUse":1577526025254,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":8,"column":30},"end":{"row":8,"column":31}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":9,"column":18},"end":{"row":10,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":4}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":4},"end":{"row":10,"column":7}},"text":"_id"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":4},"end":{"row":10,"column":5}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":5},"end":{"row":10,"column":6}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":6},"end":{"row":10,"column":7}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":7},"end":{"row":10,"column":8}},"text":"."}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":8},"end":{"row":10,"column":9}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":4},"end":{"row":10,"column":9}},"text":"lse.f"},{"action":"insertText","range":{"start":{"row":10,"column":4},"end":{"row":10,"column":5}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":5},"end":{"row":10,"column":6}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":6},"end":{"row":10,"column":7}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":6},"end":{"row":10,"column":7}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":6},"end":{"row":10,"column":7}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":7},"end":{"row":10,"column":8}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":8},"end":{"row":10,"column":9}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":12},"end":{"row":10,"column":13}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":14},"end":{"row":10,"column":15}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":14},"end":{"row":10,"column":15}},"text":" "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":"-"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":13},"end":{"row":10,"column":14}},"text":"="}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":14},"end":{"row":10,"column":15}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":10,"column":15},"end":{"row":10,"column":18}},"text":"_id"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":84,"column":15},"end":{"row":84,"column":16}},"text":"m"},{"action":"removeText","range":{"start":{"row":74,"column":13},"end":{"row":74,"column":14}},"text":"m"},{"action":"removeText","range":{"start":{"row":70,"column":52},"end":{"row":70,"column":53}},"text":"m"},{"action":"removeText","range":{"start":{"row":68,"column":51},"end":{"row":68,"column":52}},"text":"m"},{"action":"removeText","range":{"start":{"row":63,"column":22},"end":{"row":63,"column":23}},"text":"m"},{"action":"removeText","range":{"start":{"row":56,"column":15},"end":{"row":56,"column":16}},"text":"m"},{"action":"removeText","range":{"start":{"row":54,"column":13},"end":{"row":54,"column":14}},"text":"m"},{"action":"removeText","range":{"start":{"row":43,"column":15},"end":{"row":43,"column":16}},"text":"m"},{"action":"removeText","range":{"start":{"row":36,"column":48},"end":{"row":36,"column":49}},"text":"m"},{"action":"removeText","range":{"start":{"row":34,"column":13},"end":{"row":34,"column":14}},"text":"m"},{"action":"removeText","range":{"start":{"row":30,"column":52},"end":{"row":30,"column":53}},"text":"m"},{"action":"removeText","range":{"start":{"row":28,"column":51},"end":{"row":28,"column":52}},"text":"m"},{"action":"removeText","range":{"start":{"row":23,"column":22},"end":{"row":23,"column":23}},"text":"m"},{"action":"removeText","range":{"start":{"row":16,"column":15},"end":{"row":16,"column":16}},"text":"m"},{"action":"removeText","range":{"start":{"row":14,"column":13},"end":{"row":14,"column":14}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":84,"column":15},"end":{"row":84,"column":16}},"text":"l"},{"action":"insertText","range":{"start":{"row":74,"column":13},"end":{"row":74,"column":14}},"text":"l"},{"action":"insertText","range":{"start":{"row":70,"column":52},"end":{"row":70,"column":53}},"text":"l"},{"action":"insertText","range":{"start":{"row":68,"column":51},"end":{"row":68,"column":52}},"text":"l"},{"action":"insertText","range":{"start":{"row":63,"column":22},"end":{"row":63,"column":23}},"text":"l"},{"action":"insertText","range":{"start":{"row":56,"column":15},"end":{"row":56,"column":16}},"text":"l"},{"action":"insertText","range":{"start":{"row":54,"column":13},"end":{"row":54,"column":14}},"text":"l"},{"action":"insertText","range":{"start":{"row":43,"column":15},"end":{"row":43,"column":16}},"text":"l"},{"action":"insertText","range":{"start":{"row":36,"column":48},"end":{"row":36,"column":49}},"text":"l"},{"action":"insertText","range":{"start":{"row":34,"column":13},"end":{"row":34,"column":14}},"text":"l"},{"action":"insertText","range":{"start":{"row":30,"column":52},"end":{"row":30,"column":53}},"text":"l"},{"action":"insertText","range":{"start":{"row":28,"column":51},"end":{"row":28,"column":52}},"text":"l"},{"action":"insertText","range":{"start":{"row":23,"column":22},"end":{"row":23,"column":23}},"text":"l"},{"action":"insertText","range":{"start":{"row":16,"column":15},"end":{"row":16,"column":16}},"text":"l"},{"action":"insertText","range":{"start":{"row":14,"column":13},"end":{"row":14,"column":14}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":36,"column":49},"end":{"row":36,"column":58}},"text":".items() "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":36,"column":32},"end":{"row":36,"column":34}},"text":", "}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":36,"column":31},"end":{"row":36,"column":32}},"text":"_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":4},"end":{"row":29,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":29,"column":4},"end":{"row":29,"column":6}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":69,"column":45},"end":{"row":69,"column":46}},"text":"_"},{"action":"removeText","range":{"start":{"row":69,"column":21},"end":{"row":69,"column":22}},"text":"_"},{"action":"removeText","range":{"start":{"row":68,"column":7},"end":{"row":68,"column":8}},"text":"_"},{"action":"removeText","range":{"start":{"row":29,"column":45},"end":{"row":29,"column":46}},"text":"_"},{"action":"removeText","range":{"start":{"row":29,"column":21},"end":{"row":29,"column":22}},"text":"_"},{"action":"removeText","range":{"start":{"row":28,"column":7},"end":{"row":28,"column":8}},"text":"_"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":69,"column":43},"end":{"row":69,"column":44}},"text":"g"},{"action":"removeText","range":{"start":{"row":69,"column":20},"end":{"row":69,"column":21}},"text":"g"},{"action":"removeText","range":{"start":{"row":68,"column":6},"end":{"row":68,"column":7}},"text":"g"},{"action":"removeText","range":{"start":{"row":29,"column":43},"end":{"row":29,"column":44}},"text":"g"},{"action":"removeText","range":{"start":{"row":29,"column":20},"end":{"row":29,"column":21}},"text":"g"},{"action":"removeText","range":{"start":{"row":28,"column":6},"end":{"row":28,"column":7}},"text":"g"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":69,"column":41},"end":{"row":69,"column":42}},"text":"v"},{"action":"removeText","range":{"start":{"row":69,"column":19},"end":{"row":69,"column":20}},"text":"v"},{"action":"removeText","range":{"start":{"row":68,"column":5},"end":{"row":68,"column":6}},"text":"v"},{"action":"removeText","range":{"start":{"row":29,"column":41},"end":{"row":29,"column":42}},"text":"v"},{"action":"removeText","range":{"start":{"row":29,"column":19},"end":{"row":29,"column":20}},"text":"v"},{"action":"removeText","range":{"start":{"row":28,"column":5},"end":{"row":28,"column":6}},"text":"v"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":69,"column":39},"end":{"row":69,"column":40}},"text":"a"},{"action":"removeText","range":{"start":{"row":69,"column":18},"end":{"row":69,"column":19}},"text":"a"},{"action":"removeText","range":{"start":{"row":68,"column":4},"end":{"row":68,"column":5}},"text":"a"},{"action":"removeText","range":{"start":{"row":29,"column":39},"end":{"row":29,"column":40}},"text":"a"},{"action":"removeText","range":{"start":{"row":29,"column":18},"end":{"row":29,"column":19}},"text":"a"},{"action":"removeText","range":{"start":{"row":28,"column":4},"end":{"row":28,"column":5}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":69,"column":38},"end":{"row":69,"column":39}},"text":"E"},{"action":"insertText","range":{"start":{"row":69,"column":18},"end":{"row":69,"column":19}},"text":"E"},{"action":"insertText","range":{"start":{"row":68,"column":4},"end":{"row":68,"column":5}},"text":"E"},{"action":"insertText","range":{"start":{"row":29,"column":38},"end":{"row":29,"column":39}},"text":"E"},{"action":"insertText","range":{"start":{"row":29,"column":18},"end":{"row":29,"column":19}},"text":"E"},{"action":"insertText","range":{"start":{"row":28,"column":4},"end":{"row":28,"column":5}},"text":"E"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":69,"column":44},"end":{"row":69,"column":45}},"text":"e"},{"action":"removeText","range":{"start":{"row":69,"column":23},"end":{"row":69,"column":24}},"text":"e"},{"action":"removeText","range":{"start":{"row":68,"column":9},"end":{"row":68,"column":10}},"text":"e"},{"action":"removeText","range":{"start":{"row":29,"column":44},"end":{"row":29,"column":45}},"text":"e"},{"action":"removeText","range":{"start":{"row":29,"column":23},"end":{"row":29,"column":24}},"text":"e"},{"action":"removeText","range":{"start":{"row":28,"column":9},"end":{"row":28,"column":10}},"text":"e"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":69,"column":42},"end":{"row":69,"column":43}},"text":"m"},{"action":"removeText","range":{"start":{"row":69,"column":22},"end":{"row":69,"column":23}},"text":"m"},{"action":"removeText","range":{"start":{"row":68,"column":8},"end":{"row":68,"column":9}},"text":"m"},{"action":"removeText","range":{"start":{"row":29,"column":42},"end":{"row":29,"column":43}},"text":"m"},{"action":"removeText","range":{"start":{"row":29,"column":22},"end":{"row":29,"column":23}},"text":"m"},{"action":"removeText","range":{"start":{"row":28,"column":8},"end":{"row":28,"column":9}},"text":"m"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":69,"column":40},"end":{"row":69,"column":41}},"text":"i"},{"action":"removeText","range":{"start":{"row":69,"column":21},"end":{"row":69,"column":22}},"text":"i"},{"action":"removeText","range":{"start":{"row":68,"column":7},"end":{"row":68,"column":8}},"text":"i"},{"action":"removeText","range":{"start":{"row":29,"column":40},"end":{"row":29,"column":41}},"text":"i"},{"action":"removeText","range":{"start":{"row":29,"column":21},"end":{"row":29,"column":22}},"text":"i"},{"action":"removeText","range":{"start":{"row":28,"column":7},"end":{"row":28,"column":8}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":30,"column":0},"end":{"row":30,"column":56}},"text":"    return np.mean([q.avg_qtime() for q in self.i_q_l] )"},{"action":"removeLines","range":{"start":{"row":28,"column":0},"end":{"row":30,"column":0}},"nl":"\n","lines":["    Eqt_l = [q.avg_qtime() for q in self.i_q_l]","    log(WARNING, \"Eqt_l= {}\".format(Eqt_l) )"]},{"action":"removeText","range":{"start":{"row":27,"column":2},"end":{"row":27,"column":15}},"text":"def ET(self):"},{"action":"removeText","range":{"start":{"row":27,"column":2},"end":{"row":28,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":27,"column":2},"end":{"row":27,"column":19}},"text":"def ET_ET2(self):"},{"action":"insertText","range":{"start":{"row":27,"column":19},"end":{"row":28,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":28,"column":0},"end":{"row":32,"column":0}},"lines":["  ET_l, ET2_l = [], []","  for q in self.i_q_l:","    ET_l.append(q.Eqt() )","    ET2_l.append(q.Eqt2() )"]},{"action":"insertText","range":{"start":{"row":32,"column":0},"end":{"row":32,"column":38}},"text":"  return np.mean(ET_l), np.mean(ET2_l)"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":28,"column":0},"end":{"row":28,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":29,"column":0},"end":{"row":29,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":30,"column":0},"end":{"row":30,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":31,"column":0},"end":{"row":31,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":32,"column":0},"end":{"row":32,"column":2}},"text":"  "}]}]],"redo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":43,"column":0},"end":{"row":43,"column":29}},"text":"      self.i_q_l[i].release()"},{"action":"removeLines","range":{"start":{"row":4,"column":0},"end":{"row":43,"column":0}},"nl":"\n","lines":["# *************************************  SamplekMix  ****************************************** #","## n servers with Poisson arrivals, every time a message arrives, k queues are selected at uniformly random and released.","class SamplekMix(object):","  def __init__(self, env, n, k, pd=None):","    self.env = env","    self.n = n","    self.k = k","    self.pd = pd if pd is not None else 1/n","    ","    self.i_q_l = []","    for i in range(self.n):","      self.i_q_l.append(SlaveQ(_id=i, env=env) )","  ","  def __repr__(self):","    return 'SamplekMix[n={}, k={}]'.format(self.n, self.k)","  ","  def qt_l(self):","    l = []","    for q in self.i_q_l:","      l.extend(q.qt_l)","    return l","  ","  def ET(self):","    Eqt_l = [q.avg_qtime() for q in self.i_q_l]","    log(WARNING, \"Eqt_l= {}\".format(Eqt_l) )","    return np.mean([q.avg_qtime() for q in self.i_q_l] )","  ","  def put(self, p):","    slog(DEBUG, self.env, self, \"recved\", p)","    self.i_q_l[p.flow_id].put(p)","    ","    l = list(range(self.n) )","    l.remove(p.flow_id)","    if np.random.uniform(0, 1) <= self.pd:","      i_l = [p.flow_id] + [l[i] for i in np.random.choice(self.n-1, self.k-1, replace=False) ]","    else:","      i_l = [l[i] for i in np.random.choice(self.n-1, self.k, replace=False) ]","    # print(\"i_l= {}\".format(i_l) )","    for i in i_l:"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":4,"column":0},"end":{"row":5,"column":0}},"nl":"\n","lines":["  "]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":4,"column":0},"end":{"row":5,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":45,"column":0},"end":{"row":45,"column":29}},"text":"      self.i_q_l[i].release()"},{"action":"removeLines","range":{"start":{"row":4,"column":0},"end":{"row":45,"column":0}},"nl":"\n","lines":["# *************************************  SamplekMix  ****************************************** #","## n servers with Poisson arrivals.","## Every time a message arrives, *and if all queues are non-empty*, then k queues are selected at uniformly random and released.","class True_SamplekMix(object):","  def __init__(self, env, _id, n, k):","    self.env = env","    self._id = _id","    self.n = n","    self.k = k","    ","    self.i_q_l = []","    for i in range(self.n):","      self.i_q_l.append(SlaveQ(_id=i, env=env) )","    ","  def __repr__(self):","    return 'True_SamplekMix[n={}, k={}]'.format(self.n, self.k)","  ","  def qt_l(self):","    l = []","    for q in self.i_q_l:","      l.extend(q.qt_l)","    return l","  ","  def ET_ET2(self):","    ET_l, ET2_l = [], []","    for q in self.i_q_l:","      ET_l.append(q.Eqt() )","      ET2_l.append(q.Eqt2() )","    return np.mean(ET_l), np.mean(ET2_l)","  ","  def put(self, p):","    slog(DEBUG, self.env, self, \"recved\", p)","    self.i_q_l[p.flow_id].put(p)","    ","    if any(q.length() == 0 for q in self.i_q_l):","      slog(DEBUG, self.env, self, \"There is an empty q, won't release any. Received:\", p)","      return","    ","    i_l = np.random.choice(self.n, self.k, replace=False)","    slog(DEBUG, self.env, self, \"will release q's:\", i_l)","    for i in i_l:"]}]}]]},"/run.sh":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":12,"column":2},"end":{"row":12,"column":2}},"lastUse":1577525989443,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":2},"end":{"row":11,"column":4}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"nl":"\n","lines":["  $PYTHON randmix_exp.py"]},{"action":"insertLines","range":{"start":{"row":9,"column":0},"end":{"row":10,"column":0}},"lines":["  $PYTHON randmix_exp.py"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":9,"column":0},"end":{"row":10,"column":0}},"nl":"\n","lines":["  $PYTHON randmix_exp.py"]},{"action":"insertLines","range":{"start":{"row":8,"column":0},"end":{"row":9,"column":0}},"lines":["  $PYTHON randmix_exp.py"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":8,"column":0},"end":{"row":9,"column":0}},"nl":"\n","lines":["  $PYTHON randmix_exp.py"]},{"action":"insertLines","range":{"start":{"row":7,"column":0},"end":{"row":8,"column":0}},"lines":["  $PYTHON randmix_exp.py"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":8,"column":0},"end":{"row":9,"column":0}},"nl":"\n","lines":["  $PYTHON simplex_exp.py"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":0},"end":{"row":12,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":0},"end":{"row":11,"column":23}},"text":"elif [ $1 = 'r' ]; then"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":13},"end":{"row":11,"column":14}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":13},"end":{"row":11,"column":14}},"text":"b"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":23},"end":{"row":12,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":0},"end":{"row":12,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":2},"end":{"row":12,"column":26}},"text":"$PYTHON randmix_model.py"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":12,"column":10},"end":{"row":12,"column":23}},"text":"randmix_model"},{"action":"insertText","range":{"start":{"row":12,"column":10},"end":{"row":12,"column":11}},"text":"b"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":11},"end":{"row":12,"column":12}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":12},"end":{"row":12,"column":13}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":13},"end":{"row":12,"column":14}},"text":"c"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":14},"end":{"row":12,"column":15}},"text":"h"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":15},"end":{"row":12,"column":16}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":16},"end":{"row":12,"column":17}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":17},"end":{"row":12,"column":18}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":18},"end":{"row":12,"column":19}},"text":"x"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":19},"end":{"row":12,"column":20}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":20},"end":{"row":12,"column":21}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":21},"end":{"row":12,"column":22}},"text":"x"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":12,"column":22},"end":{"row":12,"column":23}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":13},"end":{"row":11,"column":14}},"text":"b"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":11,"column":13},"end":{"row":11,"column":14}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":12,"column":10},"end":{"row":12,"column":16}},"text":"batch_"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":9,"column":0},"end":{"row":10,"column":0}},"nl":"\n","lines":["  # $PYTHON mixed_exp.py"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":11,"column":2},"end":{"row":11,"column":20}},"text":"$PYTHON mix_exp.py"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":21},"end":{"row":7,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":7,"column":0},"end":{"row":7,"column":18}},"text":"$PYTHON mix_exp.py"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":7,"column":0},"end":{"row":7,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":8,"column":0},"end":{"row":9,"column":0}},"nl":"\n","lines":["  $PYTHON randmix_exp.py"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"nl":"\n","lines":["elif [ $1 = 'm' ]; then"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":10,"column":0},"end":{"row":11,"column":0}},"nl":"\n","lines":["  "]}]}]],"redo":[]},"/sim_objs.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":15,"column":0},"end":{"row":15,"column":0}},"lastUse":1577515564728,"undo":[[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":82,"column":0},"end":{"row":83,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":82,"column":0},"end":{"row":83,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":80,"column":0},"end":{"row":80,"column":26}},"text":"      self.n_released += 1"},{"action":"removeLines","range":{"start":{"row":44,"column":0},"end":{"row":80,"column":0}},"nl":"\n","lines":["# **************************************  Slave Q  ********************************** #","class SlaveQ(Q): # Release HoL at command","  def __init__(self, _id, env):","    super().__init__(_id, env)","    ","    self.m_l = []","    self.n_recved = 0","    self.n_released = 0","    self.qt_l = []","  ","  def __repr__(self):","    return \"SlaveQ[_id={}]\".format(self._id)","  ","  def length(self):","    return len(self.m_l)","  ","  def Eqt(self):","    return sum(self.qt_l)/len(self.qt_l)","    # nonzero_qt_l = [t for t in self.qt_l if t > 0.000001]","    # return sum(nonzero_qt_l)/len(nonzero_qt_l)","  ","  def Eqt2(self):","    return sum([t**2 for t in self.qt_l] )/len(self.qt_l)","    ","  def put(self, m):","    slog(DEBUG, self.env, self, \"recved\", m)","    self.n_recved += 1","    m.ref_time = self.env.now","    ","    self.m_l.append(m)","  ","  def release(self):","    if len(self.m_l):","      m = self.m_l.pop(0)","      self.qt_l.append(self.env.now - m.ref_time)","      slog(DEBUG, self.env, self, \"released\", m)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":44,"column":0},"end":{"row":45,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":44,"column":0},"end":{"row":45,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":41},"end":{"row":17,"column":42}},"text":","}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":42},"end":{"row":17,"column":43}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":43},"end":{"row":17,"column":44}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":44},"end":{"row":17,"column":45}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":45},"end":{"row":17,"column":46}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":46},"end":{"row":17,"column":47}},"text":"="}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":47},"end":{"row":17,"column":48}},"text":"N"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":48},"end":{"row":17,"column":49}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":49},"end":{"row":17,"column":50}},"text":"n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":17,"column":50},"end":{"row":17,"column":51}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":26,"column":15},"end":{"row":26,"column":19}},"text":"None"},{"action":"insertText","range":{"start":{"row":26,"column":15},"end":{"row":26,"column":16}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":16},"end":{"row":26,"column":17}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":26,"column":17},"end":{"row":26,"column":18}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":26,"column":0},"end":{"row":27,"column":0}},"nl":"\n","lines":["    self.out = out"]},{"action":"insertLines","range":{"start":{"row":25,"column":0},"end":{"row":26,"column":0}},"lines":["    self.out = out"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":25,"column":0},"end":{"row":26,"column":0}},"nl":"\n","lines":["    self.out = out"]},{"action":"insertLines","range":{"start":{"row":24,"column":0},"end":{"row":25,"column":0}},"lines":["    self.out = out"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":24,"column":0},"end":{"row":25,"column":0}},"nl":"\n","lines":["    self.out = out"]},{"action":"insertLines","range":{"start":{"row":23,"column":0},"end":{"row":24,"column":0}},"lines":["    self.out = out"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":23,"column":0},"end":{"row":24,"column":0}},"nl":"\n","lines":["    self.out = out"]},{"action":"insertLines","range":{"start":{"row":22,"column":0},"end":{"row":23,"column":0}},"lines":["    self.out = out"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"nl":"\n","lines":["from patch import *"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":1}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":1},"end":{"row":2,"column":2}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":2},"end":{"row":2,"column":3}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":3},"end":{"row":2,"column":4}},"text":"m"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":4},"end":{"row":2,"column":5}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":5},"end":{"row":2,"column":6}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":6},"end":{"row":2,"column":7}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":7},"end":{"row":2,"column":8}},"text":"g"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":8},"end":{"row":2,"column":9}},"text":"_"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":9},"end":{"row":2,"column":10}},"text":"u"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":10},"end":{"row":2,"column":11}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":11},"end":{"row":2,"column":12}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":12},"end":{"row":2,"column":13}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":13},"end":{"row":2,"column":14}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":14},"end":{"row":2,"column":15}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":15},"end":{"row":2,"column":16}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":16},"end":{"row":2,"column":17}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":17},"end":{"row":2,"column":18}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":18},"end":{"row":2,"column":19}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":19},"end":{"row":2,"column":20}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":20},"end":{"row":2,"column":21}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":21},"end":{"row":2,"column":22}},"text":" "}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":22},"end":{"row":2,"column":23}},"text":"*"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":23},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":32,"column":23},"end":{"row":32,"column":24}},"text":"s"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":32,"column":24},"end":{"row":32,"column":25}},"text":"e"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":32,"column":25},"end":{"row":32,"column":26}},"text":"l"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":32,"column":26},"end":{"row":32,"column":27}},"text":"f"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":32,"column":27},"end":{"row":32,"column":28}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":34,"column":42},"end":{"row":34,"column":46}},"text":"gen_"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":60,"column":0},"end":{"row":61,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":61,"column":0},"end":{"row":61,"column":87}},"text":"# **************************************  Slave Q  ********************************** #"},{"action":"insertText","range":{"start":{"row":61,"column":87},"end":{"row":62,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":62,"column":0},"end":{"row":98,"column":0}},"lines":["class SlaveQ(Q): # Release HoL at command","  def __init__(self, _id, env):","    super().__init__(_id, env)","    ","    self.m_l = []","    self.n_recved = 0","    self.n_released = 0","    self.qt_l = []","  ","  def __repr__(self):","    return \"SlaveQ[_id={}]\".format(self._id)","  ","  def length(self):","    return len(self.m_l)","  ","  def Eqt(self):","    return sum(self.qt_l)/len(self.qt_l)","    # nonzero_qt_l = [t for t in self.qt_l if t > 0.000001]","    # return sum(nonzero_qt_l)/len(nonzero_qt_l)","  ","  def Eqt2(self):","    return sum([t**2 for t in self.qt_l] )/len(self.qt_l)","    ","  def put(self, m):","    slog(DEBUG, self.env, self, \"recved\", m)","    self.n_recved += 1","    m.ref_time = self.env.now","    ","    self.m_l.append(m)","  ","  def release(self):","    if len(self.m_l):","      m = self.m_l.pop(0)","      self.qt_l.append(self.env.now - m.ref_time)","      slog(DEBUG, self.env, self, \"released\", m)","      self.n_released += 1"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]}]],"redo":[]},"/randmix_sim.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":11,"column":4},"end":{"row":11,"column":4}},"lastUse":1577515486785,"undo":[],"redo":[]},"/plot_utils.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":15,"column":45},"end":{"row":15,"column":45}},"lastUse":1577457203368,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":17}},"text":"def prettify(ax):"},{"action":"insertText","range":{"start":{"row":0,"column":17},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":10,"column":0}},"lines":["  plot.tick_params(top='off', right='off', which='both')","  ax.patch.set_alpha(0.2)","  ax.spines['right'].set_visible(False)","  ax.spines['top'].set_visible(False)","","def add_tail_dist(ax, x_l, color='blue'):","  plot.sca(ax)","  x_l = numpy.sort(x_l)[::-1]","  y_l = numpy.arange(x_l.size)/x_l.size"]},{"action":"insertText","range":{"start":{"row":10,"column":0},"end":{"row":10,"column":61}},"text":"  plot.step(x_l, y_l, color=color, marker='o', linestyle=':')"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":17}},"text":"import matplotlib"},{"action":"insertText","range":{"start":{"row":0,"column":17},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":6,"column":0}},"lines":["matplotlib.rcParams['pdf.fonttype'] = 42","matplotlib.rcParams['ps.fonttype'] = 42","# matplotlib.rcParams['ps.useafm'] = True","# matplotlib.rcParams['pdf.use14corefonts'] = True","# matplotlib.rcParams['text.usetex'] = True"]},{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":21}},"text":"matplotlib.use('Agg')"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":43}},"text":"# matplotlib.rcParams['text.usetex'] = True"},{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":5,"column":0}},"nl":"\n","lines":["# matplotlib.rcParams['ps.useafm'] = True","# matplotlib.rcParams['pdf.use14corefonts'] = True"]}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":2,"column":39},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":21},"end":{"row":4,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":0},"end":{"row":4,"column":32}},"text":"import matplotlib.pyplot as plot"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":6,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":7,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":14}},"text":"mew, ms = 3, 5"},{"action":"insertText","range":{"start":{"row":6,"column":14},"end":{"row":7,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":7,"column":0},"end":{"row":24,"column":0}},"lines":["","NICE_BLUE = '#66b3ff'","NICE_RED = '#ff9999'","NICE_GREEN = '#99ff99'","NICE_ORANGE = '#ffcc99'","","nicecolor_c = itertools.cycle((NICE_BLUE, NICE_RED, NICE_GREEN, NICE_ORANGE))","darkcolor_c = itertools.cycle(('green', 'red', 'blue', 'gray', 'magenta', 'goldenrod', 'purple', 'brown', 'turquoise', 'gold', 'olive', 'silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'darkgray', 'orangered'))","lightcolor_c = itertools.cycle(('silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'turquoise'))","linestyle_c = itertools.cycle(('-', '--', '-.', ':') )","marker_c = itertools.cycle(('^', 'p', 'd', 'v', '<', '>', '1', '2', '3', '4', 'x', '+') )","skinnym_l = ['x', '+', '1', '2', '3', '4']","","def prettify(ax):","  plot.tick_params(top='off', right='off', which='both')","  ax.patch.set_alpha(0.2)","  ax.spines['right'].set_visible(False)"]},{"action":"insertText","range":{"start":{"row":24,"column":0},"end":{"row":24,"column":37}},"text":"  ax.spines['top'].set_visible(False)"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":26,"column":0},"end":{"row":31,"column":0}},"nl":"\n","lines":["def prettify(ax):","  plot.tick_params(top='off', right='off', which='both')","  ax.patch.set_alpha(0.2)","  ax.spines['right'].set_visible(False)","  ax.spines['top'].set_visible(False)"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":26,"column":0},"end":{"row":27,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":1,"column":0},"end":{"row":2,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":5,"column":0},"end":{"row":6,"column":0}},"text":"\n"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":7,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":9}},"text":"itertools"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":1}},"text":"i"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":1},"end":{"row":6,"column":2}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":2},"end":{"row":6,"column":3}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":3},"end":{"row":6,"column":4}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":6,"column":3},"end":{"row":6,"column":4}},"text":"r"}]},{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":6,"column":2},"end":{"row":6,"column":3}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":2},"end":{"row":6,"column":3}},"text":"p"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":3},"end":{"row":6,"column":4}},"text":"o"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":4},"end":{"row":6,"column":5}},"text":"r"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":5},"end":{"row":6,"column":6}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":6,"column":6},"end":{"row":6,"column":7}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":5,"column":0},"end":{"row":6,"column":0}},"nl":"\n","lines":[""]}]}]],"redo":[]},"/rvs.py":{"scrollTop":321,"scrollLeft":0,"selection":{"start":{"row":40,"column":2},"end":{"row":40,"column":2}},"lastUse":1577435578090,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":17}},"text":"import matplotlib"},{"action":"insertText","range":{"start":{"row":0,"column":17},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":472,"column":0}},"lines":["matplotlib.rcParams['pdf.fonttype'] = 42","matplotlib.rcParams['ps.fonttype'] = 42","","matplotlib.use('Agg')","import matplotlib.pyplot as plot","","import math, random, numpy, csv","from scipy.stats import *","from patch import *","","class RV(): # Random Variable","  def __init__(self, l_l, u_l):","    self.l_l = l_l","    self.u_l = u_l","","class Exp(RV):","  def __init__(self, mu, D=0):","    RV.__init__(self, l_l=D, u_l=float(\"inf\") )","    self.D = D","    self.mu = mu","  ","  def __str__(self):","    # return \"Exp(D={}, mu={})\".format(self.D, self.mu)","    return r'Exp(\\mu={})'.format(self.mu)","  ","  def tail(self, x):","    if x <= self.l_l:","      return 1","    return math.exp(-self.mu*(x - self.D) )","  ","  def cdf(self, x):","    if x <= self.l_l:","      return 0","    return 1 - math.exp(-self.mu*(x - self.D) )","  ","  def pdf(self, x):","    if x <= self.l_l:","      return 0","    return self.mu*math.exp(-self.mu*(x - self.D) )","  ","  def mean(self):","    return self.D + 1/self.mu","  ","  def var(self):","    return 1/self.mu**2","  ","  def sample(self):","    return self.D + random.expovariate(self.mu)","","class Pareto(RV):","  def __init__(self, loc, a):","    RV.__init__(self, l_l=loc, u_l=float(\"inf\") )","    self.loc = loc","    self.a = a","  ","  def __str__(self):","    # return \"Pareto(loc= {}, a= {})\".format(self.loc, self.a)","    return r'Pareto(s= {}, \\alpha= {})'.format(self.loc, self.a)","  ","  def to_latex(self):","    return r\"${}(\\min= {}, \\alpha= {})$\".format(r'\\mathrm{Pareto}', round(self.loc, 2), round(self.a, 2) )","  ","  def tail(self, x):","    if x <= self.l_l:","      return 1","    return (self.loc/x)**self.a","  ","  def cdf(self, x):","    if x <= self.l_l:","      return 0","    return 1 - (self.loc/x)**self.a","  ","  def pdf(self, x):","    if x <= self.l_l:","      return 0","    return self.a*self.loc**self.a / x**(self.a+1)","  ","  def dpdf_dx(self, x):","    if x <= self.l_l:","      return 0","    return sympy.mpmath.diff(lambda y: self.a*self.loc**self.a / y**(self.a+1), x)","  ","  def mean(self):","    if self.a <= 1:","      log(WARNING, \"Mean is Infinity; a= {} <= 1\".format(self.a) )","      return float(\"inf\")","    else:","      return self.loc*self.a/(self.a-1)","  ","  def var(self):","    if self.a <= 2:","      log(WARNING, \"Variance is Infinity; a= {} <= 2\".format(self.a) )","      return float(\"inf\")","    else:","      return self.a*self.loc**2 / (self.a-1)**2/(self.a-2)","  ","  def sample(self):","    return ((numpy.random.pareto(self.a, 1) + 1)*self.loc)[0]","    # return pareto.ppf(numpy.random.uniform(0, 1), b=self.a, scale=self.loc)","","class TPareto(): # Truncated","  def __init__(self, l, u, a):","    RV.__init__(self, l_l=l, u_l=u)","    self.l = l","    self.u = u","    self.a = a","  ","  def __str__(self):","    return \"Pareto(l= {}, u= {}, a= {})\".format(self.l, self.u, self.a)","  ","  def to_latex(self):","    return r\"${}(\\min= {}, \\max= {}, \\alpha= {})$\".format(r'\\mathrm{TPareto}', round(self.l, 2), round(self.u, 2), round(self.a, 2) )","    ","  def cdf(self, x):","    if x < self.l: return 0","    elif x >= self.u: return 1","    else:","      return (1 - (self.l/x)**self.a)/(1 - (self.l/self.u)**self.a)","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def mean(self):","    return self.moment(1)","  ","  def moment(self, k):","    if k == self.a:","      return math.log(self.u_l/self.l)","    else:","      return self.a*self.l**k/(self.a-k) * \\","             (1 - (self.l/self.u)**(self.a-k))/(1 - (self.l/self.u)**self.a)","  ","  def sample(self):","    u = random.uniform(0, 1)","    return self.l*(1 - u*(1-(self.l/self.u)**self.a) )**(-1/self.a)","","def plot_gensample_check():","  l, u, a = 1, 10**5, 2","  rv = TPareto(l, u, a)","  ","  x_l = []","  for i in range(10**5):","    x_l.append(rv.sample() )","  x_l = numpy.sort(x_l)","  x_l = x_l[::-1]","  # i_ = None","  # for i in range(len(x_l)-1, 0, -1):","  #   if x_l[i] > 1.01: i_ = i; break","  # x_l = x_l[:i_]","  y_l = numpy.arange(x_l.size)/x_l.size","  plot.plot(x_l, y_l, marker=next(marker), color=next(dark_color), linestyle=':', mew=mew, ms=ms)","  ","  y_l = []","  for x in x_l:","    y_l.append(rv.tail(x) )","  plot.plot(x_l, y_l, label=r'$Pareto(l= %.2f, u= %.2f, \\alpha= %.2f)$' % (l, u, a), color=next(dark_color), linestyle='-')","  plot.legend()","  plot.xscale('log')","  plot.yscale('log')","  plot.xlabel(r'$x$', fontsize=13)","  plot.ylabel(r'$p(X > x)$', fontsize=13)","  plot.title(r'$X \\sim$ {}'.format(rv) )","  plot.savefig(\"plot_gensample_check.png\")","  plot.gcf().clear()","","class Google(RV):","  def __init__(self, k):","    RV.__init__(self, l_l=0, u_l=float(\"inf\") )","    ","    self.k = k","    self.sample_l = []","    # with open(\"filtered_task_lifetimes_for_jobs_w_num_task_{}.dat\".format(k), mode=\"rt\") as f:","    with open(\"task_lifetimes_for_jobs_w_num_task_{}.dat\".format(k), mode=\"rt\") as f:","      reader = csv.reader(f)","      for line in reader:","        self.sample_l.append(float(line[0] ) )","    self.sample_l.sort()","    self.num_sample = len(self.sample_l)","  ","  def __str__(self):","    return \"Google(k= \".format(self.k)","  ","  def mean(self):","    return sum(self.sample_l)/self.num_sample","  ","  def sample(self):","    return self.sample_l[math.floor(self.num_sample*random.random() ) ]","","class SimRV(RV):","  def __init__(self, sample_l):","    RV.__init__(self, l_l=min(sample_l), u_l=max(sample_l) )","    ","    self.sample_l = sample_l","    self.num_sample = len(self.sample_l)","  ","  def __str__(self):","    return \"SimRV\"","  ","  def mean(self):","    return sum(self.sample_l)/self.num_sample","  ","  def sample(self):","    return self.sample_l[math.floor(self.num_sample*random.random() ) ]","","class ExplicitRV(RV):","  def __init__(self, v_l, p_l):","    RV.__init__(self, l_l=min(v_l), u_l=max(v_l) )","    ","    self.v_l = v_l","    self.p_l = p_l","    self.dist = scipy.stats.rv_discrete(name='dolly', values=(v_l, p_l) )","  ","  def __repr__(self):","    return \"ExplicitRV[\\n\\tv_l= {}, \\n\\tp_l= {}]\".format(self.v_l, self.p_l)","  ","  def sample(self):","    return self.dist.rvs()","","class Dolly(RV):","  ## Kristen et al. A Better Model for Job Redundancy: Decoupling Server Slowdown and Job Size","  def __init__(self):","    RV.__init__(self, l_l=1, u_l=12)","    ","    self.v = numpy.arange(1, 13)","    self.p = [0.23, 0.14, 0.09, 0.03, 0.08, 0.1, 0.04, 0.14, 0.12, 0.021, 0.007, 0.002]","    self.dist = scipy.stats.rv_discrete(name='dolly', values=(self.v, self.p) )","  ","  def __str__(self):","    return \"Dolly[{}, {}]\".format(self.l_l, self.u_l)","  ","  def pdf(self, x):","    return self.dist.pmf(x) if (x >= self.l_l and x <= self.u_l) else 0","  ","  def cdf(self, x):","    if x < self.l_l:","      return 0","    elif x > self.u_l:","      return 1","    return float(self.dist.cdf(x) )","  ","  def sample(self):","    u = random.uniform(0, 1)","    # if u <= 0.23: return 1 + u/100","    # u -= 0.23","    # if u <= 0.14: return 2 + u/100","    # u -= 0.14","    # if u <= 0.09: return 3 + u/100","    # u -= 0.09","    # if u <= 0.03: return 4 + u/100","    # u -= 0.03","    # if u <= 0.08: return 5 + u/100","    # u -= 0.08","    # if u <= 0.1: return 6 + u/100","    # u -= 0.1","    # if u <= 0.04: return 7 + u/100","    # u -= 0.04","    # if u <= 0.14: return 8 + u/100","    # u -= 0.14","    # if u <= 0.12: return 9 + u/100","    # u -= 0.12","    # if u <= 0.021: return 10 + u/100","    # u -= 0.021","    # if u <= 0.007: return 11 + u/100","    # u -= 0.007","    # if u <= 0.002: return 12 + u/100","    # return 12 + u/100 # for safety","    return self.dist.rvs() + u/100","","class Bern(RV):","  def __init__(self, L, U, p):","    RV.__init__(self, l_l=L, u_l=U)","    ","    self.p = p","  ","  def __str__(self):","    return \"Bern(l= {}, u= {}, p= {})\".format(self.l_l, self.u_l, self.p)","  ","  def mean(self):","    return (1 - self.p)*self.l_l + self.p*self.u_l","  ","  def sample(self):","    u = random.uniform(0, 1)","    return self.u_l + u/100 if u <= self.p else self.l_l + u/100","","# class BernPareto(RV):","#   def __init__(self, U, L, p, loc, a):","#     RV.__init__(self, l_l=U*loc, u_l=float(\"Inf\") )","    ","#     self.bern = Bern(U, L, p)","#     self.pareto = Pareto(loc, a)","  ","#   def __str__(self):","#     return \"Bern*Pareto\"","  ","#   def mean(self):","#     return self.bern.mean()*self.pareto.mean()","  ","#   def sample(self):","#     return self.bern.sample()*self.pareto.sample()","","class DUniform(): # Discrete","  def __init__(self, lb, ub):","    RV.__init__(self, l_l=lb, u_l=ub)","  ","  def __str__(self):","    return \"DUniform[{}, {}]\".format(self.l_l, self.u_l)","  ","  def mean(self):","    return (self.u_l + self.l_l)/2","  ","  def pdf(self, x):","    return float(1/(self.u_l - self.l_l + 1) )","  ","  def sample(self):","    return random.randint(self.l_l, self.u_l)","","class BoundedZipf():","  def __init__(self, lb, ub, a=1):","    RV.__init__(self, l_l=lb, u_l=ub)","    self.a = a","    ","    self.v = numpy.arange(self.l_l, self.u_l+1) # values","    w_l = [float(v)**(-a) for v in self.v] # self.v**(-a) # weights","    self.p = [w/sum(w_l) for w in w_l]","    self.dist = scipy.stats.rv_discrete(name='bounded_zipf', values=(self.v, self.p) )","  ","  def __str__(self):","    return \"BoundedZipf([{}, {}], a= {})\".format(self.l_l, self.u_l, self.a)","  ","  def pdf(self, x):","    return self.dist.pmf(x)","  ","  def cdf(self, x):","    # if x < self.l_l: return 0","    # elif x >= self.u_l: return 1","    # else:","    #   return sum(self.p[:(x-self.l_l+1) ] )","    return self.dist.cdf(x)","  ","  def inv_cdf(self, p):","    return self.dist.ppf(p)","  ","  def tail(self, x):","    return 1 - self.cfd(x)","  ","  def mean(self):","    # return sum([v*self.p(i) for i,v in enumerate(self.v) ] )","    return self.dist.mean()","  ","  def sample(self):","    return self.dist.rvs(size=1)","","class Binomial():","  def __init__(self, n, p):","    RV.__init__(self, l_l=0, u_l=n)","    self.n = n","    self.p = p","    ","    self.dist = scipy.stats.binom(n, p)","  ","  def __str__(self):","    return \"Binom[n= {}, p= {}]\".format(self.n, self.p)","  ","  def pdf(self, x):","    return self.dist.pmf(x)","    ","  def cdf(self, x):","    return self.dist.cdf(x)","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def sample(self):","    return self.dist.rvs(size=1)","","class NegBinomial():","  def __init__(self, num_succ, p):","    RV.__init__(self, l_l=num_succ, u_l=float(\"Inf\") )","    self.p = p","    ","    self.dist = scipy.stats.nbinom(num_succ, p)","  ","  def __str__(self):","    return \"NegBinom[num_succ= {}, p= {}]\".format(self.l_l, self.p)","  ","  def cdf(self, x):","    return self.dist.cdf(x - self.l_l)","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def sample(self):","    return self.dist.rvs(size=1)","","class Gamma():","  def __init__(self, num_exp, rate):","    RV.__init__(self, l_l=0, u_l=float(\"Inf\") )","    ","    self.shape, self.scale = num_exp, 1/rate","    # self.dist = numpy.random.gamma(shape, scale, size=1)","    self.dist = scipy.stats.gamma(self.shape, self.scale)","  ","  def __str__(self):","    return \"Gamma[shape= {}, scale= {}]\".format(self.shape, self.scale)","  ","  def cdf(self, x):","    return self.dist.cdf(x)","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def sample(self):","    return self.dist.rvs(size=1)","","class X_n_k():","  def __init__(self, X, n, k):","    RV.__init__(self, l_l=X.l_l, u_l=X.u_l)","    self.X, self.n, self.k = X, n, k","  ","  def __str__(self):","    return \"{}_{{}:{}}\".format(self.X, self.n, self.k)","  ","  def pdf(self, x):","    return self.n*self.X.pdf(x) * binom(self.n-1, self.k-1) * self.X.cdf(x)**(self.k-1) * self.X.tail(x)**(self.n-self.k)","  ","  def cdf(self, x):","    # return cdf_n_k(self.X, self.n, self.k, x)","    cdf = 0","    for i in range(self.k, self.n+1):","      cdf += binom(self.n, i) * self.X.cdf(x)**i * self.X.tail(x)**(self.n-i)","    return cdf","  ","  def tail(self, x):","    return 1 - self.cdf(x)","  ","  def sample(self):","    return gen_orderstat_sample(self.X, self.n, self.k)","","def moment_ith(i, X):","  return float(mpmath.quad(lambda x: i*x**(i-1) * (1 - X.cdf(x) ), [0, mpmath.inf] ) ) # 10000*10","","def rv_from_m(dist_m):","  d = dist_m['dist']","  if d == 'Exp':","    return Exp(dist_m['mu'] )","  elif d == \"SExp\":","    return Exp(dist_m['mu'], dist_m['D'] )","  elif d == \"Pareto\":","    return Pareto(dist_m['l'], dist_m['a'] )","  elif d == \"TPareto\":","    return TPareto(dist_m['l'], dist_m['u'], dist_m['a'] )","  elif d == \"Bern\":","    return Bern(dist_m['U'], dist_m['L'], dist_m['p'] )","  elif d == 'Dolly':","    return Dolly()","","def binom(n, k):","  # if n == k:","  #   return 1","  # elif k == 1:","  #   return n","  # elif k == 0:","  #   return 1","  # elif k > n:","  #   return 0","  # else:","  #   return math.factorial(n)/math.factorial(k)/math.factorial(n-k)","  return scipy.special.binom(n, k)","","if __name__ == \"__main__\":","  plot_gensample_check()"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":5,"column":0},"end":{"row":5,"column":32}},"text":"import matplotlib.pyplot as plot"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":5,"column":0}},"nl":"\n","lines":["import matplotlib","matplotlib.rcParams['pdf.fonttype'] = 42","matplotlib.rcParams['ps.fonttype'] = 42","","matplotlib.use('Agg')"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":3,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":19},"end":{"row":4,"column":0}},"text":"\n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":0},"end":{"row":4,"column":24}},"text":"from plot_utils import *"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":4,"column":5},"end":{"row":4,"column":9}},"text":"plot"},{"action":"insertText","range":{"start":{"row":4,"column":5},"end":{"row":4,"column":6}},"text":"m"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":6},"end":{"row":4,"column":7}},"text":"a"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":7},"end":{"row":4,"column":8}},"text":"t"}]},{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":4,"column":8},"end":{"row":4,"column":9}},"text":"h"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"nl":"\n","lines":["from patch import *"]}]}]],"redo":[]},"/log_utils.py":{"scrollTop":282.5,"scrollLeft":0,"selection":{"start":{"row":23,"column":27},"end":{"row":23,"column":27}},"lastUse":1577435481178,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":22}},"text":"import inspect, pprint"},{"action":"insertText","range":{"start":{"row":0,"column":22},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":59,"column":0}},"lines":["","INFO = 0","DEBUG = 1","WARNING = 2","ERROR = 3","debug_level__string_map = {INFO: \"INFO\", DEBUG: \"DEBUG\", WARNING: \"WARNING\", ERROR: \"ERROR\"}","","# SDEBUG_LEVEL = INFO","SDEBUG_LEVEL = WARNING","# SDEBUG_LEVEL = ERROR","","\"\"\"","*log: To have a unified logging which can be refactored easily","\"\"\"","def slog(dlevel, env, caller, action, affected, **kwargs):","  \"\"\"","  Parameters","  ----------","  dlevel= int -- debug level","  env= simpy.Environment","  caller= string -- name of the sim component acting","  action= string","  affected= any -- whatever component being acted on/with e.g., packet","  \"\"\"","  if SDEBUG_LEVEL <= dlevel:","    print(\"{} t: {:.2f}] {} {}\\n\\t{}\".format(debug_level__string_map[dlevel], env.now, caller, action, affected) )","    for k, v in kwargs.items():","      print(\"  {}: {}\".format(k, pprint.pformat(v) ) )","","DEBUG_LEVEL = INFO","# DEBUG_LEVEL = WARNING","# DEBUG_LEVEL = ERROR","","def log(dlevel, log, **kwargs):","  \"\"\"","  Parameters","  ----------","  dlevel= int -- debug level","  log= string to be logged","  \"\"\"","  try:","    funcname = inspect.stack()[1][3]","  except IndexError:","    funcname = ''","  ","  if DEBUG_LEVEL <= dlevel:","    print(\"{}] {}:: {}\".format(debug_level__string_map[dlevel], funcname, log) )","    for k, v in kwargs.items():","      print(\"  {}: {}\".format(k, pprint.pformat(v) ) )","","def alog(log, **kwargs):","  print(\"{}:: {}\".format(inspect.stack()[1][3], log) )","  for k, v in kwargs.items():","    print(\"  {}: {}\".format(k, pprint.pformat(v) ) )","","def blog(**kwargs):","  for k, v in kwargs.items():","    print(\"  {}: {}\".format(k, pprint.pformat(v) ) )"]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":29,"column":0},"end":{"row":30,"column":0}},"text":"\n"}]}]],"redo":[]},"/mixed_exp.py":{"scrollTop":7466,"scrollLeft":0,"selection":{"start":{"row":377,"column":34},"end":{"row":377,"column":34}},"lastUse":1577435365023,"undo":[],"redo":[]},"/math_utils.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":18,"column":10},"end":{"row":18,"column":10}},"lastUse":1577435260558,"undo":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":17}},"text":"import matplotlib"},{"action":"insertText","range":{"start":{"row":0,"column":17},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":221,"column":0}},"lines":["matplotlib.rcParams['pdf.fonttype'] = 42","matplotlib.rcParams['ps.fonttype'] = 42","# matplotlib.rcParams['ps.useafm'] = True","# matplotlib.rcParams['pdf.use14corefonts'] = True","# matplotlib.rcParams['text.usetex'] = True","matplotlib.use('Agg')","import matplotlib.pyplot as plot","import inspect, math, mpmath, scipy, itertools","from scipy import special","","# dark_color = itertools.cycle(('green', 'red', 'blue', 'turquoise', 'goldenrod', 'purple', 'gray', 'brown', 'magenta', 'gold', 'olive', 'orangered', 'silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'darkgray'))","dark_color = itertools.cycle(('green', 'red', 'goldenrod', 'blue', 'magenta', 'purple', 'gray', 'brown', 'turquoise', 'gold', 'olive', 'silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'darkgray', 'orangered'))","light_color = itertools.cycle(('silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'turquoise'))","linestyle = itertools.cycle(('-', '--', '-.', ':') )","marker = itertools.cycle(('^', 'o', 'd', 'v', '<', '>', 'p', '+', '1' , '2', '3', '4') )","skinny_marker_l = ['x', '+', '1', '2', '3', '4']","","mew, ms = 3, 5","","INFO = 0","DEBUG = 1","WARNING = 2","ERROR = 3","","# DEBUG_LEVEL = INFO","DEBUG_LEVEL = WARNING","# DEBUG_LEVEL = ERROR","","debug_level__string_map = {INFO: \"INFO\", DEBUG: \"DEBUG\", WARNING: \"WARNING\", ERROR: \"ERROR\"}","","\"\"\"","*log: To have a unified logging which can be refactored easily","\"\"\"","def sim_log(dlevel, env, caller, action, affected):","  \"\"\"","  Parameters","  ----------","  dlevel= int -- debug level","  env= simpy.Environment","  caller= string -- name of the sim component acting","  action= string","  affected= any -- whatever component being acted on/with e.g., packet","  \"\"\"","  if DEBUG_LEVEL <= dlevel:","    print(\"{} t: {:.2f}] {} {}\\n\\t{}\".format(debug_level__string_map[dlevel], env.now, caller, action, affected) )","","","","def log(dlevel, log):","  \"\"\"","  Parameters","  ----------","  dlevel= int -- debug level","  log= string to be logged","  \"\"\"","  if DEBUG_LEVEL <= dlevel:","    print(\"{}] {}:: {}\".format(debug_level__string_map[dlevel], inspect.stack()[1][3], log) )","","def prettify(ax):","  plot.tick_params(top='off', right='off', which='both')","  ax.patch.set_alpha(0.2)","  ax.spines['right'].set_visible(False)","  ax.spines['top'].set_visible(False)","","def add_tail_dist(ax, x_l, color='blue'):","  plot.sca(ax)","  x_l = numpy.sort(x_l)[::-1]","  y_l = numpy.arange(x_l.size)/x_l.size","  plot.step(x_l, y_l, color=color, marker='o', linestyle=':')","","def list_to_str(l):","  return \",\".join(\"%s\" % e for e in l)","","def H_cont(n):","  return mpmath.quad(lambda x: (1-x**n)/(1-x), [0, 1] )","","def H(n):","  if n == 0:","    return 0","  sum_ = 0","  for i in range(1, n+1):","    sum_ += float(1/i)","  return sum_","","def H_2(n):","  sum_ = 0","  for i in range(1, n+1):","    sum_ += float(1/(i**2) )","  return sum_","","def gen_H(n, k):","  sum_ = 0","  for i in range(1, n+1):","    if (i - k) == 0:","      continue","    sum_ += float(1/(i*(i - k) ) )","  return sum_","","def binom(n, k):","  return scipy.special.binom(n, k)","","# def binom(x, y):","#   try:","#     binom = factorial(x) // factorial(y) // factorial(x - y)","#   except ValueError:","#     binom = 0","#   return binom","","def I(u_l, m, n):","  # den = B(m, n)","  # if den == 0:","  #   return None","  # return B(m, n, u_l=u_l)/den","  return scipy.special.betainc(m, n, u_l)","","def B(m, n, u_l=1):","  # return mpmath.quad(lambda x: x**(m-1) * (1-x)**(n-1), [0, u_l] )","  if u_l == 1:","    return scipy.special.beta(m, n)","  else:","    return I(u_l, m, n)*B(m, n)","","def G(z):","  return scipy.special.gamma(z)","  # return mpmath.quad(lambda x: x**(z-1) * math.exp(-z), [0, mpmath.inf] )","","# Order stats","def cdf_n_k(n, k, X, x): # Pr{X_n:k < x}","  cdf = 0","  for i in range(k, n+1):","    cdf += binom(n, i) * X.cdf(x)**i * X.tail(x)**(n-i)","  return cdf","","def moment_i_n_k(i, n, k, X): # E[X_n:k]","  return mpmath.quad(lambda x: i*x**(i-1) * (1 - cdf_n_k(n, k, X, x) ), [0, mpmath.inf] )","","# Qing","def PK(EV, EV_2, ar):","  if ar*EV >= 1:","    return None","  ET = EV + ar*EV_2/2/(1 - ar*EV)","  if ET > 100: return None","  return ET","","def fit_pareto(s_l):","  n = len(s_l)","  ","  fit_upper_tail = False # True","  if not fit_upper_tail:","    l = s_l[-1]","    D = 0","    for s in s_l:","      D += math.log(s) - math.log(l)","    a = (n-1)/D","  elif fit_upper_tail:","    l = s_l[-1]","    i = int(math.sqrt(n) ) # int(n*0.5)","    s_l = s_l[:i]","    l_ = s_l[-1]","    D = 0","    for s in s_l:","      D += math.log(s) - math.log(l_)","    a = i/D","  log(WARNING, \"done; l= {}, a= {}\".format(l, a) )","  return l, a","","def fit_tpareto(s_l):","  ## s_l is ordered in descending order","  # i_ = 0","  # for i in range(len(s_l)-1, -1, -1):","  #   if s_l[i] > 1.05:","  #     i_ = i","  #     break","  # n = len(s_l)","  # s_l = s_l[:i_]","  # Pr_to_subtract = (n - i_)/n","  ","  n = len(s_l)","  log(WARNING, \"n= {}\".format(n) )","  fit_upper_tail = False # True","  def solve_a(eq):","    a = 0.01","    _a = None","    while True:","      if eq(a) > 0:","        _a = a","        a += 0.01","      else:","        return _a if _a is not None else 0.01","  ","  u = s_l[0]","  if not fit_upper_tail:","    l = s_l[-1]","    r = l/u","    # Did not work somehow","    # a = sympy.Symbol('a')","    # a = sympy.solve(n/a + n*r**a*math.log(r)/(1-r**a) - sum([math.log(x/l) for x in s_l] ) )","    a = solve_a(lambda a: n/a + n*r**a*math.log(r)/(1-r**a) - sum([math.log(x/l) for x in s_l] ) )","  else:","    i = int(math.sqrt(n) ) # int(n*0.5)","    X_ip1 = s_l[i+1]","    r = X_ip1/u","    a = solve_a(lambda a: i/a + i*r**a*math.log(r)/(1-r**a) - sum([math.log(x) - math.log(X_ip1) for x in s_l[:i+1] ] ) )","    l = i**(1/a) * X_ip1*(n - (n-i)*(X_ip1/u)**a)**(-1/a) # 1","  log(WARNING, \"done; l= {}, u= {}, a= {}\".format(l, u, a) )","  return l, u, a","","def fit_sexp(s_l):","  # https://www.statlect.com/fundamentals-of-statistics/exponential-distribution-maximum-likelihood","  D = min(s_l)","  n = len(s_l)","  mu = n/(sum(s_l) - n*D)","  ","  return D, mu","","if __name__ == \"__main__\":","  a = 2","  f = lambda k: G(1 - 1/a)**(-a/2)/math.sqrt(k+1)","  ","  print(\"f(10)= {}\".format(f(10) ) )"]},{"action":"insertText","range":{"start":{"row":221,"column":0},"end":{"row":221,"column":38}},"text":"  print(\"f(100)= {}\".format(f(100) ) )"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":11,"column":0},"end":{"row":58,"column":0}},"nl":"\n","lines":["# dark_color = itertools.cycle(('green', 'red', 'blue', 'turquoise', 'goldenrod', 'purple', 'gray', 'brown', 'magenta', 'gold', 'olive', 'orangered', 'silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'darkgray'))","dark_color = itertools.cycle(('green', 'red', 'goldenrod', 'blue', 'magenta', 'purple', 'gray', 'brown', 'turquoise', 'gold', 'olive', 'silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'darkgray', 'orangered'))","light_color = itertools.cycle(('silver', 'rosybrown', 'plum', 'lightsteelblue', 'lightpink', 'orange', 'turquoise'))","linestyle = itertools.cycle(('-', '--', '-.', ':') )","marker = itertools.cycle(('^', 'o', 'd', 'v', '<', '>', 'p', '+', '1' , '2', '3', '4') )","skinny_marker_l = ['x', '+', '1', '2', '3', '4']","","mew, ms = 3, 5","","INFO = 0","DEBUG = 1","WARNING = 2","ERROR = 3","","# DEBUG_LEVEL = INFO","DEBUG_LEVEL = WARNING","# DEBUG_LEVEL = ERROR","","debug_level__string_map = {INFO: \"INFO\", DEBUG: \"DEBUG\", WARNING: \"WARNING\", ERROR: \"ERROR\"}","","\"\"\"","*log: To have a unified logging which can be refactored easily","\"\"\"","def sim_log(dlevel, env, caller, action, affected):","  \"\"\"","  Parameters","  ----------","  dlevel= int -- debug level","  env= simpy.Environment","  caller= string -- name of the sim component acting","  action= string","  affected= any -- whatever component being acted on/with e.g., packet","  \"\"\"","  if DEBUG_LEVEL <= dlevel:","    print(\"{} t: {:.2f}] {} {}\\n\\t{}\".format(debug_level__string_map[dlevel], env.now, caller, action, affected) )","","","","def log(dlevel, log):","  \"\"\"","  Parameters","  ----------","  dlevel= int -- debug level","  log= string to be logged","  \"\"\"","  if DEBUG_LEVEL <= dlevel:","    print(\"{}] {}:: {}\".format(debug_level__string_map[dlevel], inspect.stack()[1][3], log) )"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":11,"column":0},"end":{"row":12,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":21,"column":0},"end":{"row":21,"column":61}},"text":"  plot.step(x_l, y_l, color=color, marker='o', linestyle=':')"},{"action":"removeLines","range":{"start":{"row":11,"column":0},"end":{"row":21,"column":0}},"nl":"\n","lines":["def prettify(ax):","  plot.tick_params(top='off', right='off', which='both')","  ax.patch.set_alpha(0.2)","  ax.spines['right'].set_visible(False)","  ax.spines['top'].set_visible(False)","","def add_tail_dist(ax, x_l, color='blue'):","  plot.sca(ax)","  x_l = numpy.sort(x_l)[::-1]","  y_l = numpy.arange(x_l.size)/x_l.size"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":6,"column":0},"end":{"row":6,"column":21}},"text":"matplotlib.use('Agg')"},{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":6,"column":0}},"nl":"\n","lines":["import matplotlib","matplotlib.rcParams['pdf.fonttype'] = 42","matplotlib.rcParams['ps.fonttype'] = 42","# matplotlib.rcParams['ps.useafm'] = True","# matplotlib.rcParams['pdf.use14corefonts'] = True","# matplotlib.rcParams['text.usetex'] = True"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":32}},"text":"import matplotlib.pyplot as plot"}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":0,"column":0},"end":{"row":1,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":3,"column":0},"end":{"row":4,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":3,"column":0},"end":{"row":3,"column":2}},"text":"# "},{"action":"insertText","range":{"start":{"row":4,"column":0},"end":{"row":4,"column":2}},"text":"# "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":153,"column":38},"end":{"row":154,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":154,"column":0},"end":{"row":154,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":154,"column":0},"end":{"row":154,"column":2}},"text":"  "}]}]],"redo":[]},"/mixed_sim.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":12,"column":26},"end":{"row":12,"column":26}},"lastUse":1577365497688,"undo":[[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":172,"column":0},"end":{"row":172,"column":33}},"text":"      yield (self.attack_success)"},{"action":"removeLines","range":{"start":{"row":5,"column":0},"end":{"row":172,"column":0}},"nl":"\n","lines":["# *************************************  Mixed Packet Generator  ********************************* #","class MixedPG(object):","  def __init__(self, env, _id, qarrdist_m_l):","    self._id = _id","    self.env = env","    self.qarrdist_m_l = qarrdist_m_l","    ","    self.i__n_sent = len(qarrdist_m_l)*[0]","    self.run_l = []","    for i, dist_m in enumerate(qarrdist_m_l):","      self.run_l.append(self.env.process(self.run(i, dist_m) ) )","    self.out = None","  ","  def __repr__(self):","    return \"MixedPG[_id={}, qarrdist_m_l=\\n {}]\".format(self._id, self.qarrdist_m_l)","  ","  def run(self, i, dist_m):","    while 1:","      dist = dist_m['dist']","      if dist == 'Exp':","        rv = Exp(dist_m['mu'] )","      elif dist == 'Pareto':","        rv = Pareto(dist_m['loc'], dist_m['a'])","      yield self.env.timeout(rv.gen_sample() )","      self.i__n_sent[i] += 1","      self.out.put(Packet(time=self.env.now, _id=self.i__n_sent[i], flow_id=i) )","","# ********************************************  Slave Q  ***************************************** #","class SlaveQ(Q): # Release HoL at command","  def __init__(self, _id, env):","    super().__init__(_id, env)","    ","    self.p_l = []","    self.n_recved = 0","    self.n_released = 0","    self.qt_l = []","  ","  def __repr__(self):","    return \"SlaveQ[_id={}]\".format(self._id)","  ","  def length(self):","    return len(self.p_l)","  ","  def avg_qtime(self):","    return sum(self.qt_l)/len(self.qt_l)","    # nonzero_qt_l = [t for t in self.qt_l if t > 0.000001]","    # return sum(nonzero_qt_l)/len(nonzero_qt_l)","  ","  def avg_qtime2(self):","    return sum([t**2 for t in self.qt_l] )/len(self.qt_l)","    ","  def put(self, p):","    sim_log(DEBUG, self.env, self, \"recved\", p)","    self.n_recved += 1","    p.ref_time = self.env.now","    ","    self.p_l.append(p)","  ","  def release(self):","    if len(self.p_l):","      p = self.p_l.pop(0)","      self.qt_l.append(self.env.now - p.ref_time)","      sim_log(DEBUG, self.env, self, \"released\", p)","      self.n_released += 1","","# *************************************  Mixed Net  ****************************************** #","# n servers with Poisson arrivals, once any k servers are busy, Hol is immediately released.","class MixedNet(object): # Network","  def __init__(self, env, n, k, attacker=None):","    self.env = env","    self.n = n","    self.k = k","    self.attacker = attacker","    ","    self.i_q_m = []","    for i in range(self.n):","      self.i_q_m.append(SlaveQ(_id=i, env=env) )","    ","    self.start_time = env.now","    ","    self.attack_on = False","    self.attacker_startt = None","    self.attack_success = None","    self.est_attackt = None","    self.attackt_l = []","    self.ested_attackt_l = []","    if self.attacker is not None:","      env.process(self.run_attacker() )","  ","  def __repr__(self):","    return \"MixedNet[n={}, k={}]\".format(self.n, self.k)","  ","  def state(self):","    ql_l = [self.i_q_m[i].length() for i in range(self.n) ]","    return ','.join(map(str, ql_l) )","  ","  def qt_l(self):","    l = []","    for q in self.i_q_m:","      l.extend(q.qt_l)","    return l","  ","  def ET_ET2(self):","    ET_sum, ET2_sum = 0, 0","    for q in self.i_q_m:","      ET_sum += q.avg_qtime()","      ET2_sum += q.avg_qtime2()","    return ET_sum/self.n, ET2_sum/self.n","  ","  def throughput(self):","    n_released = sum([q.n_released for i,q in enumerate(self.i_q_m) ] )","    return n_released/(self.env.now - self.start_time)","  ","  def put(self, p):","    sim_log(DEBUG, self.env, self, \"recved\", p)","    ","    self.i_q_m[p.flow_id].put(p)","    ","    if self.attack_on:","      self.attacker.in_packet(p.flow_id)","    ","    o_l = []","    for i, q in enumerate(self.i_q_m):","      if q.length():","        o_l.append(i)","    ","    if len(o_l) >= self.k:","      for i in o_l:","        self.i_q_m[i].release()","      ","      if self.attack_on:","        self.attacker.out_frame(o_l)","        # if self.attacker.state() == self.state(): # StateSniffer","        if len(self.attacker.possibleo_l) == 1: # AttackOne","          attackt = self.env.now - self.attacker_startt","          self.attackt_l.append(attackt)","          # self.ested_attackt_l.append(self.est_attackt)","          self.attack_on = False","          self.attack_success.succeed()","  ","  def run_attacker(self):","    while True:","      yield self.env.timeout(1000) # 5000","      self.attack_on = True","      ","      # k, n = self.k, self.n","      # ql_l = sorted([self.i_q_m[i].length() for i in range(n) ] )","      # ql_l = [0] + ql_l[n-k+1:]","      # print(\"ql_l= {}\".format(ql_l) )","      # sum_ = 0","      # for i in range(1, k):","      #   sum_ += (ql_l[i] - ql_l[i-1] ) * (H(n-k+i) - H(n-k) )","      # self.est_attackt = sum_","      ","      # longest_ql = ql_l[0]","      # self.est_attackt = longest_ql / (n-k+1) # lb","      ","      # dist_m = {'dist': 'Exp', 'mu': 1}","      # pe = pempty(n, k, dist_m)","      # self.est_attackt = longest_ql * serv_moment_approx(pe, n, k, 1, dist_m)","      # mu = -tail_exponent(n, k, dist_m)","      # self.est_attackt = 1/mu * H(n)","      ","      self.attacker_startt = self.env.now","      self.attacker.reset()","      ","      self.attack_success = self.env.event()"]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":5,"column":0},"end":{"row":6,"column":0}},"nl":"\n","lines":[""]}]}],[{"group":"doc","deltas":[{"action":"removeLines","range":{"start":{"row":5,"column":0},"end":{"row":6,"column":0}},"nl":"\n","lines":[""]}]}]],"redo":[]},"/mixed_newmodels.py":{"scrollTop":0,"scrollLeft":0,"selection":{"start":{"row":16,"column":33},"end":{"row":16,"column":33}},"lastUse":1577365348702,"undo":[],"redo":[]}}}